{"version":3,"sources":["ListCurrentBooks.js","ListWantedBooks.js","ListReadableBooks.js","utils/BooksAPI.js","SearchBooks.js","App.js","index.js"],"names":["ListCurrentBooks","books","this","props","console","log","className","map","book","shelf","key","id","style","width","height","backgroundImage","imageLinks","thumbnail","defaultValue","onChange","event","updateShelf","target","value","disabled","title","authors","Component","ListWantedBooks","ListReadableBooks","api","token","localStorage","Math","random","toString","substr","headers","getAll","fetch","then","res","json","data","update","method","body","JSON","stringify","search","query","SearchBooks","state","searchBooks","trim","length","BooksAPI","setState","currentState","currentShelf","inShelf","b","push","getShelf","indexOf","setShelf","to","type","placeholder","padding","display","textAlign","verticalAlign","lineHeight","fontWeight","genre","onClick","innerText","undefined","hasOwnProperty","smallThumbnail","includes","BooksApp","shelves","prevProps","prevState","exact","path","render","history","React","ReactDOM","document","getElementById"],"mappings":"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","file":"static/js/main.78056b5c.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\n\nclass ListCurrentBooks extends Component {\n    static propTypes = {\n        \n        books: PropTypes.array.isRequired,\n        updateShelf: PropTypes.func.isRequired\n    }\n\n      \n    \n    render() {\n    const {books } = this.props;\n\n\n\n   \n    console.log(books);\n        return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Currently Reading</h2>\n            <div className=\"bookshelf-books\">\n            <ol className=\"books-grid\">\n                {books.map((book) =>(\n                    book.shelf==='currentlyReading' &&(\n                        <li key ={book.id}>\n                        <div className=\"book\">\n                            <div className=\"book-top\">\n                            <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}>\n                            </div> \n                            <div className=\"book-shelf-changer\">\n                                <select defaultValue={book.shelf} onChange={(event) => {this.props.updateShelf(book, event.target.value)}}>\n                                <option value=\"move\" disabled>Move to...</option>\n                                <option value=\"currentlyReading\">{ book.shelf ==='currentlyReading' ? '📚Currently Reading': 'Currently Reading' }</option>\n                                <option value=\"wantToRead\">{ book.shelf ==='wantToRead' ? '📚Want to Read' : 'Want to Read'}</option>\n                                <option value=\"read\">{ book.shelf ==='read' ? '📚Read' : 'Read'}</option>\n                                <option value=\"none\">{ book.shelf === 'none' ? '🥺 None' : 'None'} </option>\n                                </select>\n                            </div>\n                            </div>\n                            <div className=\"book-title\">  {book.title}   </div>\n                            <div className=\"book-authors\"> {book.authors}  </div>\n                        </div>\n                        </li>\n                    )\n                       ))}\n            </ol>\n            </div>\n        </div>\n         \n\n            )\n    }\n}\n\nexport default ListCurrentBooks\n\n\n\n\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\n\nclass ListWantedBooks extends Component {\n\n    static propTypes = {\n        \n        books: PropTypes.array.isRequired,\n        updateShelf: PropTypes.func.isRequired\n    }\n\n      \n    \n    render() {\n    const {books } = this.props;\n\n\n\n   \n    console.log(books);\n        return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Want to read</h2>\n            <div className=\"bookshelf-books\">\n            <ol className=\"books-grid\">\n                {books.map((book) =>(\n                    book.shelf==='wantToRead' &&(\n                        <li key ={book.id}>\n                        <div className=\"book\">\n                            <div className=\"book-top\">\n                            <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}>\n                            </div> \n                            <div className=\"book-shelf-changer\">\n                                <select defaultValue={book.shelf} onChange={(event) => {this.props.updateShelf(book, event.target.value)}}>\n                                <option value=\"move\" disabled>Move to...</option>\n                                <option value=\"currentlyReading\">{ book.shelf ==='currentlyReading' ? '📚Currently Reading': 'Currently Reading' }</option>\n                                <option value=\"wantToRead\">{ book.shelf ==='wantToRead' ? '📚Want to Read' : 'Want to Read'}</option>\n                                <option value=\"read\">{ book.shelf ==='read' ? '📚Read' : 'Read'}</option>\n                                <option value=\"none\">{ book.shelf === 'none' ? '🥺 None' : 'None'} </option>\n                                </select>\n                            </div>\n                            </div>\n                            <div className=\"book-title\">  {book.title}   </div>\n                            <div className=\"book-authors\"> {book.authors}  </div>\n                        </div>\n                        </li>\n                    )\n                       ))}\n            </ol>\n            </div>\n        </div>\n         \n\n            )\n    }\n}\n\nexport default ListWantedBooks\n","import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport { Link } from 'react-router-dom'\n\n\nclass ListReadableBooks extends Component {\n    static propTypes = {\n        \n        books: PropTypes.array.isRequired,\n        updateShelf: PropTypes.func.isRequired\n    }\n\n      \n    \n    render() {\n    const {books } = this.props;\n\n\n\n   \n    console.log(books);\n        return (\n        <div className=\"bookshelf\">\n            <h2 className=\"bookshelf-title\">Read</h2>\n            <div className=\"bookshelf-books\">\n            <ol className=\"books-grid\">\n                {books.map((book) =>(\n                    book.shelf==='read' &&(\n                        <li key ={book.id}>\n                        <div className=\"book\">\n                            <div className=\"book-top\">\n                            <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.imageLinks.thumbnail})` }}>\n                            </div> \n                            <div className=\"book-shelf-changer\">\n                                <select defaultValue={book.shelf} onChange={(event) => {this.props.updateShelf(book, event.target.value)}}>\n                                <option value=\"move\" disabled>Move to...</option>\n                                <option value=\"currentlyReading\">{ book.shelf ==='currentlyReading' ? '📚Currently Reading': 'Currently Reading' }</option>\n                                <option value=\"wantToRead\">{ book.shelf ==='wantToRead' ? '📚Want to Read' : 'Want to Read'}</option>\n                                <option value=\"read\">{ book.shelf ==='read' ? '📚Read' : 'Read'}</option>\n                                <option value=\"none\">{ book.shelf === 'none' ? '🥺 None' : 'None'} </option>\n                                </select>\n                            </div>\n                            </div>\n                            <div className=\"book-title\">  {book.title}   </div>\n                            <div className=\"book-authors\"> {book.authors}  </div>\n                        </div>\n                        </li>\n                    )\n                       ))}\n            </ol>\n            </div>\n        </div>\n         \n\n            )\n    }\n}\n\nexport default ListReadableBooks\n\n\n","\nconst api = \"https://reactnd-books-api.udacity.com\"\n\n\n// Generate a unique token for storing your bookshelf data on the backend server.\nlet token = localStorage.token\nif (!token)\n  token = localStorage.token = Math.random().toString(36).substr(-8);\n\nconst headers = {\n  'Accept': 'application/json',\n  'Authorization': token\n}\n\nexport const get = (bookId) =>\n  fetch(`${api}/books/${bookId}`, { headers })\n    .then(res => res.json())\n    .then(data => data.book)\n\nexport const getAll = () =>\n  fetch(`${api}/books`, { headers })\n    .then(res => res.json())\n    .then(data => data.books)\n\nexport const update = (book, shelf) =>\n  fetch(`${api}/books/${book.id}`, {\n    method: 'PUT',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ shelf })\n  }).then(res => res.json())\n\nexport const search = (query) =>\n  fetch(`${api}/search`, {\n    method: 'POST',\n    headers: {\n      ...headers,\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify({ query })\n  }).then(res => res.json())\n  .then(data => data.books)\n\n    \n","import React, { Component } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link } from 'react-router-dom'\r\nimport * as BooksAPI from './utils/BooksAPI'\r\n\r\n\r\nclass SearchBooks extends Component {\r\n    static propTypes = {\r\n        \r\n        books: PropTypes.array.isRequired,\r\n\r\n        updateShelf: PropTypes.func.isRequired\r\n\r\n    }\r\n    \r\n    state = {\r\n\r\n        query:[],\r\n        shelf:[]\r\n        \r\n    }\r\n\r\n\r\n    // getBookShelf = (id) =>{\r\n    //     let shelf ='';\r\n    //     setTimeout(\r\n    //         BooksAPI.get(id)\r\n    //         .then((book) => {\r\n    //         console.log('AAA', book)\r\n    //         shelf= book;\r\n    //         }),100000);\r\n\r\n    //     console.log('haha', shelf);\r\n    //     return shelf;\r\n    // }\r\n\r\n    searchBooks = (search) => {\r\n        if (search.trim().length)\r\n            BooksAPI.search(search)\r\n            .then((query) => {\r\n            this.setState((currentState) => ({\r\n                query\r\n                \r\n            }))\r\n            })\r\n            else{\r\n                let query =[]\r\n                this.setState(() => ({\r\n                    query\r\n                    \r\n                }))\r\n            }\r\n           \r\n           \r\n        \r\n\r\n      }\r\n  \r\n    render() {\r\n        const {query} = this.state;\r\n        const {books} = this.props;\r\n        let currentShelf= 'none';\r\n        let inShelf = {\r\n            'shelf': ['none'],\r\n            'id' :['none']\r\n        };\r\n        let searchableTerms = ['Android', 'Art', 'Artificial Intelligence', 'Astronomy', 'Austen', 'Baseball', 'Basketball', 'Bhagat', 'Biography', 'Brief', 'Business', 'Camus', 'Cervantes', 'Christie', 'Classics', 'Comics', 'Cook', 'Cricket', 'Cycling', 'Desai', 'Design', 'Development', 'Digital Marketing', 'Drama', 'Drawing', 'Dumas', 'Education', 'Everything', 'Fantasy', 'Film', 'Finance', 'First', 'Fitness', 'Football', 'Future', 'Games', 'Gandhi', 'Homer', 'Horror', 'Hugo', 'Ibsen', 'Journey', 'Kafka', 'King', 'Lahiri', 'Larsson', 'Learn', 'Literary Fiction', 'Make', 'Manage', 'Marquez', 'Money', 'Mystery', 'Negotiate', 'Painting', 'Philosophy', 'Photography', 'Poetry', 'Production', 'Programming', 'React', 'Redux', 'River', 'Robotics', 'Rowling', 'Satire', 'Science Fiction', 'Shakespeare', 'Singh', 'Swimming', 'Tale', 'Thrun', 'Time', 'Tolstoy', 'Travel', 'Ultimate', 'Virtual Reality', 'Web Development', 'iOS'\r\n    ];\r\n        books.map((b) =>{ \r\n           \r\n            if (query.length>1)\r\n            {\r\n                query.map((book) => {\r\n                if (b.id ==book.id) {\r\n                    inShelf.shelf.push(b.shelf); \r\n                    inShelf.id.push(b.id);\r\n                }});\r\n            }\r\n            else\r\n                if (b.id ==query.id) {\r\n                    inShelf.shelf.push(b.shelf); \r\n                    inShelf.id.push(b.id);\r\n                }\r\n            \r\n            });\r\n            \r\n        let getShelf = (id) =>{\r\n\r\n            currentShelf = inShelf.shelf[inShelf.id.indexOf(id)];\r\n            return currentShelf;\r\n        };\r\n\r\n              \r\n        let setShelf = () =>{\r\n\r\n            currentShelf = 'none';\r\n            return currentShelf;\r\n        };\r\n\r\n        console.log('ehh',  query);\r\n      \r\n        return(\r\n            <div className=\"search-books\">\r\n                        <div className=\"search-books-bar\">\r\n                        <Link to='/'>\r\n                        <button className=\"close-search\" >Close</button>\r\n\r\n                        </Link>\r\n                        <div className=\"search-books-input-wrapper\">\r\n                            {/*\r\n                            NOTES: The search from BooksAPI is limited to a particular set of search terms.\r\n                            You can find these search terms here:\r\n                            https://github.com/udacity/reactnd-project-myreads-starter/blob/master/SEARCH_TERMS.md\r\n\r\n                            However, remember that the BooksAPI.search method DOES search by title or author. So, don't worry if\r\n                            you don't find a specific author or title. Every search is limited by search terms.\r\n                            */}\r\n                            <input type=\"text\" className='search-bar' placeholder=\"Search by title or author\"\r\n                                onChange={(event) => this.searchBooks(event.target.value ? event.target.value : '@_____@')} \r\n\r\n                            />\r\n\r\n                        </div>\r\n                        </div>\r\n                        <div className=\"search-books-results\">\r\n                        <ol className=\"books-grid\">\r\n                            \r\n                            <div className = \"results\"  style={{padding: \"5px\", display: 'block', width:\"100%\", textAlign: \"center\", verticalAlign: \"middle\", lineHeight: \"90px\", fontWeight: \"bolder\"     }}> \r\n                            <div className = \"search-options\">\r\n                                <div className=\"dropdown\">\r\n                                    <button className=\"dropbtn\">Filter</button>\r\n                                    <div className=\"dropdown-content\">\r\n                                        {searchableTerms.map((genre) => (\r\n                                        <li onClick= {(event) => this.searchBooks(event.target.innerText ? event.target.innerText : '@_____@')}> {genre}</li> \r\n                                        ))}\r\n                                    </div>\r\n                                </div>\r\n\r\n                            </div>\r\n                            {query.length === undefined ? 'Search Results: 0 books' : `Search Results: ${query.length} books`}\r\n                            \r\n                            </div>\r\n                            \r\n                            {query.length === 1 && ( \r\n                                <li key ={query.id}>\r\n                                    <div className=\"book\">\r\n                                        <div className=\"book-top\">\r\n                                        <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${query.hasOwnProperty('imageLinks') ? query.imageLinks.hasOwnProperty('smallThumbnail') ? query.imageLinks.smallThumbnail :  query.imageLinks.hasOwnProperty('thumbnail') ? query.imageLinks.thumbnail: '' : '' })` }}>\r\n                                        </div> \r\n                                        <div className=\"book-shelf-changer\">\r\n                                            <select id = 'book-shelf-selector' defaultValue={inShelf.id.includes(query.id) ? getShelf(query.id): setShelf()}  onChange={(event) => this.props.updateShelf(query, event.target.value) }>\r\n                                            <option value=\"move\" disabled>  Move to... </option>\r\n                                            <option value=\"currentlyReading\">{ currentShelf ==='currentlyReading' ? '📚Currently Reading': 'Currently Reading' }</option>\r\n                                            <option value=\"wantToRead\">{ currentShelf ==='wantToRead' ? '📚Want to Read' : 'Want to Read'}</option>\r\n                                            <option value=\"read\">{ currentShelf ==='read' ? '📚Read' : 'Read'}</option>\r\n                                            <option value=\"none\">{ currentShelf === 'none' ? '🥺None' : 'None'} </option>\r\n                                            </select>\r\n                                        </div>\r\n                                        </div>\r\n                                        <div className=\"book-title\">  {query.title || \"'NO TITLE'\"}   </div>\r\n                                        <div className=\"book-authors\"> {query.authors || \"'NO AUTHORS'\"}  </div>\r\n                                    </div>\r\n                                </li>\r\n                            )}\r\n\r\n                            {query.length > 1 && ( query.map((book)  =>(\r\n                                <li key ={book.id}>\r\n                                    <div className=\"book\">\r\n                                        <div className=\"book-top\">\r\n                                        <div className=\"book-cover\" style={{ width: 128, height: 188, backgroundImage: `url(${book.hasOwnProperty('imageLinks') ? book.imageLinks.hasOwnProperty('smallThumbnail') ? book.imageLinks.smallThumbnail :  book.imageLinks.hasOwnProperty('thumbnail') ? book.imageLinks.thumbnail: '' : '' })` }}>\r\n                                        </div> \r\n                                        <div className=\"book-shelf-changer\">\r\n                                            <select defaultValue={ inShelf.id.includes(book.id) ? getShelf(book.id): setShelf()}  onChange={(event) => this.props.updateShelf(book, event.target.value) }>\r\n                                            <option value=\"move\" disabled>Move to...</option>\r\n                                            <option value=\"currentlyReading\">{ currentShelf ==='currentlyReading' ? '📚Currently Reading': 'Currently Reading' }</option>\r\n                                            <option value=\"wantToRead\">{ currentShelf ==='wantToRead' ? '📚Want to Read' : 'Want to Read'}</option>\r\n                                            <option value=\"read\">{ currentShelf ==='read' ? '📚Read' : 'Read'}</option>\r\n                                            <option value=\"none\">{ currentShelf === 'none' ? '🥺 None' : 'None'} </option>\r\n                                            </select>\r\n                                        </div>\r\n                                        </div>\r\n                                        <div className=\"book-title\">  {book.title || \"'NO TITLE'\"}   </div>\r\n                                        <div className=\"book-authors\"> {book.authors || \"'NO AUTHORS'\"}  </div>\r\n                                    </div>\r\n                                </li>\r\n                            )))}\r\n                        </ol>\r\n\r\n                        </div>\r\n                    </div>\r\n\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default SearchBooks\r\n\r\n","import React from 'react'\n// import * as BooksAPI from './BooksAPI'\nimport './App.css'\nimport ListCurrentBooks from './ListCurrentBooks'\nimport ListWantedBooks from './ListWantedBooks'\nimport ListReadableBooks from './ListReadableBooks'\nimport SearchBooks from './SearchBooks'\nimport { Link } from 'react-router-dom'\nimport { Route } from 'react-router-dom'\nimport * as BooksAPI from './utils/BooksAPI'\n\n\nclass BooksApp extends React.Component {\n  state = {\n    /**\n     * TODO: Instead of using this state variable to keep track of which page\n     * we're on, use the URL in the browser's address bar. This will ensure that\n     * users can use the browser's back and forward buttons to navigate between\n     * pages, as well as provide a good URL they can bookmark and share.\n     */\n    books:[],\n    shelves:{}\n\n\n  }\n\n  componentDidMount() {\n    BooksAPI.getAll()\n    .then((books) => {\n      this.setState(() => ({\n        books\n      }))\n    })\n  }\n\n  updateShelf = (book, shelf) => {\n    BooksAPI.update(book, shelf)\n    .then((shelves) => {\n      this.setState(() => ({\n        shelves\n      }))\n  })\n}\ncomponentDidUpdate(prevProps,prevState) {\n  // Typical usage (don't forget to compare props):\n  console.log('current', this.state.shelves, 'prev', prevState.shelves)\n  if (this.state.shelves !== prevState.shelves) {\n    BooksAPI.getAll()\n    .then((books) => {\n      this.setState(() => ({\n        books\n      }))\n    })\n  }\n}\n\n// not working above ??? updateshelf not triggering rerender\n\n  render() {\n  console.log('books', this.state.books, 'shelves', this.state.shelves);\n\n    return (\n      <div className=\"app\">\n\n        <Route exact path='/search' render={() => (\n          <SearchBooks books={this.state.books} updateShelf={(book,shelf) => {\n            this.updateShelf(book,shelf)}}   />\n         \n          )}/>\n\n          <Route exact path='/' render={({history}) => (\n            <div className=\"list-books\">\n              <div className=\"list-books-title\">\n                <h1>MyReads</h1>\n              </div>\n              <div className=\"list-books-content\">\n                \n                  <div>\n                    <ListCurrentBooks books={this.state.books} updateShelf={(book,shelf) => {\n                      this.updateShelf(book,shelf) \n                      }} /> \n\n                    <ListWantedBooks books={this.state.books} updateShelf={(book,shelf) => {\n                      this.updateShelf(book,shelf) \n                      }}/>\n                    <ListReadableBooks books={this.state.books} updateShelf={(book,shelf) => {\n                      this.updateShelf(book,shelf) \n                      }} /> \n                  </div>\n                \n              </div>\n              <div className=\"open-search\">\n              <Link to='/search'className=\"search\"><button>Add a book</button></Link>\n\n                \n              </div>\n            </div>\n            )}/>\n      </div>\n    )\n  }\n}\n\nexport default BooksApp\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App'\nimport { HashRouter } from 'react-router-dom'; //BrowserRouter for local deployment\nimport './index.css';\n\nReactDOM.render(<HashRouter>\n    <App />\n  </HashRouter>, document.getElementById('root'));\n\n\n"],"sourceRoot":""}